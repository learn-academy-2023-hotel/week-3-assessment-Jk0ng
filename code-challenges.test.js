// ASSESSMENT 3: Coding Practical Questions with Jest

// Please read all questions thoroughly
// Pseudo coding is REQUIRED
// If you get stuck, please leave comments to help us understand your thought process

// Use test driven development to complete the following questions
// Add appropriate dependencies: $ yarn add jest

// Reminder: The test will call your function
// Run the file with the following command: $ yarn jest

// --------------------1) Prompt: Create a function that takes in a number (greater than 2) and returns an array containing the Fibonacci sequence. The length of the array is determined by the argument of the function.

// a) Create a test with expect statements for each of the variables provided.

const fibonacciLength1 = 6
// Expected output: [1, 1, 2, 3, 5, 8]

const fibonacciLength2 = 10
// Expected output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

// describe ("fibonacciLength", () => {
//   it("takes in a number (greater than 2) and returns an array containing the Fibonacci sequence.", ()=>{
//     expect(fibonacciLength(6)).toEqual([1, 1, 2, 3, 5, 8])
//     expect(fibonacciLength(10)).toEqual([1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
//   })
// })

// b) Create the function that makes the test pass.

// Pseudo code:
//input: number 
//output: an array 

//input: 6
//output: [1, 1, 2, 3, 5, 8]
//input: 10
// output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

// create a function takes a number as the argument 
// create a new array to hold the new values
// use a for loop to generate new numbers based on Fibonacci sequence 
  // becasue the input is greater than 2, so set the initiation to be the smallest input value which is 3 -1 =2 ; 
  // the argument value determines the length of the new array, so stop initeration when the index is one less than the argument value
  // interation increments by 1 to iterate all the previous values
// push the all values from the iteration to the new array; each new value is generated by adding the two numbers before current value, so they are -1 and -2 index away from the current index
// return the newArray 


// const fibonacciLength = (number) => {
//   const newArray = [1,1]
//   for (let i = 2; i < number; i ++){ 
//   newArray.push(newArray[i-1]+ newArray[i-2])}
// return newArray

// }
// console.log(fibonacciLength(5))
// console.log(fibonacciLength(6))
// console.log(fibonacciLength(7))
// console.log(fibonacciLength(8))
// console.log(fibonacciLength(9))
// console.log(fibonacciLength(10))
// console.log(fibonacciLength(15))



// --------------------2) For the following prompt, use ChatGPT or an equivalent AI tool to help you solve the problem. The prompt will require the use of a JavaScript method called Object.values()
// Prompt: Create a function that takes in an object and returns an array of the object's values sorted from least to greatest.

// a) Create a test with expect statements for each of the variables provided.

const studyMinutesWeek1 = {
  sunday: 90,
  monday: 30,
  tuesday: 20,
  wednesday: 15,
  thursday: 30,
  friday: 15,
  saturday: 60
}
// Expected output: [15, 15, 20, 30, 30, 60, 90]

const studyMinutesWeek2 = {
  sunday: 100,
  monday: 10,
  tuesday: 45,
  wednesday: 60,
  thursday: 20,
  friday: 15,
  saturday: 65
}
// Expected output: [10, 15, 20, 45, 60, 65, 100]

describe ("studyMinutes",() => {
  it("takes in an object and returns an array of the object's values sorted from least to greatest.", () => {
    expect(studyMinutes(studyMinutesWeek1)).toEqual([15, 15, 20, 30, 30, 60, 90])
    expect(studyMinutes(studyMinutesWeek2)).toEqual([10, 15, 20, 45, 60, 65, 100])
  })
})


// b) Create the function that makes the test pass.

// Pseudo code:
// input: object
//output: an array of object's values
//  create a function that takes in an object 
//  use Object.value()to extracts the values from the object and return them in an array
// then use .sort() method and set up the comparsion function a - b to arrrange the new array in an ascending order 

const studyMinutes = (object) => {
  return Object.values(object).sort((a , b)=> a - b)
}

// console.log(studyMinutes(studyMinutesWeek1))
// console.log(studyMinutes(studyMinutesWeek2))

